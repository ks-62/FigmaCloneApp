@using Microsoft.AspNetCore.Components
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@*@inject IJSRuntime JS*@

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

@using WebAppConvas.Models


<h3>Canvas</h3>
<p>@strFirst</p>

@*<canvas id="canvas-area"></canvas>*@

<div>
    <div 
        style=" width:800px; height:600px;"
        onmousedown="@StartGetPos"
        onmousemove="@MovingGetPos"
        onmouseup="@EndGetPos"
         >
        <BECanvas Width="800" Height="600" @ref="_canvasReference"></BECanvas>
    </div>
</div>


<div>
    <PageTitle>Index</PageTitle>

    <div class="form-group">
        <label>
            User:
            <input @bind="userInput" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

@code {
    string strFirst = "Hello World!";

    List<Coordinate> crdData = new List<Coordinate>();

    internal ElementReference _blazorIconRef;
    private BECanvasComponent _canvasReference;

    //protected override async Task OnAfterRenderAsync(bool firstRender) => await Invalidate(firstRender);

    //private async Task Invalidate(bool firstRender = false)
    //{
    //    var context = await _canvasReference.CreateCanvas2DAsync();

    //    // Draw a red rectangle
    //    await context.SetStrokeStyleAsync("#FF0000");
    //    await context.StrokeRectAsync(10.0, 10.0, 100.0, 25.0);

    //    // Draw some text
    //    await context.SetStrokeStyleAsync("#000000");
    //    await context.StrokeTextAsync("This is some text", 10.0, 50.0);

    //    //// Draw an icon
    //    //await context.DrawImageAsync(_blazorIconRef, 10.0, 75.0, 50.0, 50.0);
    //}


    //Get Position
    bool isGettingPos = false;
    double startPosX = 0;
    double startPosY = 0;
    double endPosX = 0;
    double endPosY = 0;
    double prePosX = 0;
    double prePosY = 0;
    double curPosX = 0;
    double curPosY = 0;
    private void StartGetPos(MouseEventArgs e)
    {
        isGettingPos = true;

        startPosX = e.OffsetX;
        startPosY = e.OffsetY;

        prePosX = e.OffsetX;
        prePosY = e.OffsetY;

    }
    private void MovingGetPos(MouseEventArgs e)
    {
        if (!isGettingPos) return;

        curPosX = e.OffsetX;
        curPosY = e.OffsetY;

        RenderRect(startPosX, startPosY, curPosX, curPosY);

        prePosX = e.OffsetX;
        prePosY = e.OffsetY;

    }
    private void EndGetPos(MouseEventArgs e)
    {
        if (!isGettingPos) return;

        endPosX = e.OffsetX;
        endPosY = e.OffsetY;

        RenderRect(startPosX, startPosY, endPosX, endPosY);

        isGettingPos = false;
    }

    private async Task RenderRect(double startX, double startY, double endX, double endY)
    {
        double width = endX - startX;
        double height = endY - startY;

        var context = await _canvasReference.CreateCanvas2DAsync();

        // Draw a red rectangle
        await context.ClearRectAsync(0, 0, 800, 600);
        await context.SetStrokeStyleAsync("#FF0000");
        await context.StrokeRectAsync(startX, startY, width, height);
        StateHasChanged();
    }



    // SignalR
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/CanvasHub"))
            .Build();

        hubConnection.On<List<Coordinate>>("ReceiveCoordinate", (crdList) =>
        {
            crdData = crdList;

            //var encodedMsg = $"{user}: {message}";
            //messages.Add(encodedMsg);
            //_ = InvokeAsync(() =>
            //{
            //    StateHasChanged();
            //});
            //StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
